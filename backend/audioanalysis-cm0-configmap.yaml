apiVersion: v1
data:
  .gitignore: |-
    .venv
    __pycache__
    data/
    .idea
    tempFile/
  Dockerfile: |
    FROM python:3.7-slim

    WORKDIR /app

    RUN apt-get update && \
        apt-get install -y ffmpeg git wget && \
        apt-get clean && \
        rm -rf /var/lib/apt/lists/*

    RUN pip install --no-cache-dir virtualenv

    RUN python -m venv .venv

    RUN .venv/bin/pip install --upgrade pip

    COPY . .

    RUN mkdir -p /app/tempFile

    RUN mkdir -p /root/piano_transcription_inference_data
    COPY ../../data/piano_transcription_inference_data/note_F1=0.9677_pedal_F1=0.9186.pth /root/piano_transcription_inference_data/

    RUN .venv/bin/pip install --no-cache-dir openai==0.28 \
        && .venv/bin/pip install --no-cache-dir torch==1.4.0 \
        && .venv/bin/pip install --no-cache-dir pydub \
        && .venv/bin/pip install --no-cache-dir music21 \
        && .venv/bin/pip install --no-cache-dir mido \
        && .venv/bin/pip install --no-cache-dir matplotlib \
        && .venv/bin/pip install --no-cache-dir requests \
        && .venv/bin/pip install --no-cache-dir pika \
        && .venv/bin/pip install --no-cache-dir pyyaml \
        && .venv/bin/pip install --no-cache-dir piano_transcription_inference \
        && .venv/bin/pip install --no-cache-dir librosa==0.9.2

    ENV PATH="/app/.venv/bin:$PATH"

    CMD ["python", "consumer.py"]
  Readme.md: |
    python -m venv .venv
    source .venv/bin/activate
    pip install -r requirements.txt
  audioanalysis.yaml: |
    rabbitMQ:
      host: rabbitmq
      port: 5672
      user: admin
      password: password

    openai:
      key: sk-proj-7Ar4LH2nb8SSHmwRx2v1T3BlbkFJT59kL7tiVL1zLKYLSK7G
  consumer.py: |
    import re
    import os
    import pika
    import json
    import yaml
    import logging
    from preprocessing import convert2audio
    from reprocessing import parse, waterfall, midi2sheet, errorExtraction
    from inference import transcribe
    from feedback import feedback
    from s3 import s3


    class AudioProcessor:
        def __init__(self, config_file='audioanalysis.yaml'):
            self.config = self.load_config(config_file)
            self.connection = self.create_connection()
            self.send_channel = self.connection.channel()
            self.send_channel.queue_declare(queue='audio_processing_results')

        def load_config(self, config_file):
            with open(config_file, 'r') as file:
                return yaml.safe_load(file)

        def create_connection(self):
            credentials = pika.PlainCredentials(
                self.config["rabbitMQ"]["user"],
                self.config["rabbitMQ"]["password"]
            )
            return pika.BlockingConnection(
                pika.ConnectionParameters(
                    host=self.config["rabbitMQ"]["host"],
                    port=self.config["rabbitMQ"]["port"],
                    credentials=credentials
                )
            )

        def send_notification(self, is_ref, job_id, sub_user_id, record_id, ref_id, file_name):
            message = {
                "isRef": is_ref,
                'jobId': job_id,
                'subUserId': sub_user_id,
                'recordId': record_id,
                "refId": ref_id,
                'fileName': file_name,
            }
            message_body = json.dumps(message)
            self.send_channel.basic_publish(
                exchange='',
                routing_key='audio_processing_results',
                body=message_body
            )
            logging.info(f"Sent notification for job_id: {job_id}")

        def process_audio(
                self, is_ref, job_id, sub_user_id, record_id, ref_id, file_name, video_url,
                audio_url, midi_url, sheet_url, waterfall_url, report_url, json_url):

            logging.info(f"Received job {job_id} for processing")

            if video_url == "":
                s3.download_file_from_s3(
                    presigned_url=audio_url,
                    save_directory="./tempFile/",
                    filename=file_name + ".mp3"
                )
            else:
                s3.download_file_from_s3(
                    presigned_url=video_url,
                    save_directory="./tempFile/",
                    filename=file_name + ".mp4"
                )
                convert2audio.convert(
                    file_path = "./tempFile/" + file_name + ".mp4",
                    output_mp3_path= "./tempFile/" + file_name + ".mp3"
                )
                s3.upload_file_to_s3(
                    file_path="./tempFile/" + file_name + ".mp3",
                    presigned_url=audio_url
                )

            transcribe.transcribe(
                intput_file_path="./tempFile/" + file_name + ".mp3",
                output_file_path="./tempFile/" + file_name + ".mid"
            )
            s3.upload_file_to_s3(
                file_path="./tempFile/" + file_name + ".mid",
                presigned_url=midi_url
            )

            midi_events = parse.parse_mid(
                midi_file="./tempFile/" + file_name + ".mid"
            )
            parse.write2json(
                midiData=midi_events,
                json_file="./tempFile/" + file_name + "_notes" + ".json"
            )
            waterfall.waterfall(
                midi_events,
                output_file_path="./tempFile/" + file_name + ".png"
            )
            s3.upload_file_to_s3(
                file_path="./tempFile/" + file_name + ".png",
                presigned_url=waterfall_url
            )

            midi2sheet.midi_to_sheet(
                midi_file_path="./tempFile/" + file_name + ".mid",
                output_file_path="./tempFile/" + file_name
            )
            s3.upload_file_to_s3(
                file_path="./tempFile/" + file_name + ".musicxml",
                presigned_url=sheet_url
            )

            if is_ref == "TRUE":
                s3.upload_file_to_s3(
                    file_path="./tempFile/" + file_name + "_notes" + ".json",
                    presigned_url=json_url
                )
            else:
                s3.download_file_from_s3(
                    presigned_url=json_url,
                    save_directory="./tempFile/",
                    filename=file_name + "_ref" + ".json"
                )

                diff_result, standard_performance, user_performance = errorExtraction.diff(
                    reference_performance="./tempFile/" + file_name + "_ref" + ".json",
                    user_performance="./tempFile/" + file_name + "_notes" + ".json"
                )
                feedback_response = feedback.get_feedback(
                    standard_performance=standard_performance,
                    user_performance=user_performance,
                    diff=diff_result
                )
                json_data = re.search(r'```json\n(.*?)\n```', feedback_response, re.DOTALL).group(1)
                data = json.loads(json_data)
                data["raw_diff"] = diff_result
                with open("./tempFile/" + file_name + ".json", 'w') as json_file:
                    json.dump(data, json_file, indent=4)

                s3.upload_file_to_s3(
                    file_path="./tempFile/" + file_name + ".json",
                    presigned_url=report_url
                )

            self.send_notification(is_ref, job_id, sub_user_id, record_id, ref_id, file_name)
            logging.info(f"Processed and sent notification for job {job_id}")
            self.delete_file("./tempFile/" + file_name + ".mp4")
            self.delete_file("./tempFile/" + file_name + ".mp3")
            self.delete_file("./tempFile/" + file_name + ".mid")
            self.delete_file("./tempFile/" + file_name + ".png")
            self.delete_file("./tempFile/" + file_name + ".musicxml")
            self.delete_file("./tempFile/" + file_name + ".json")
            self.delete_file("./tempFile/" + file_name + "_ref" + ".json")
            self.delete_file("./tempFile/" + file_name + "_notes" + ".mp3")

        def callback(self, ch, method, properties, body):
            try:
                data = json.loads(body)
                is_ref = data['isRef']
                job_id = data['jobId']
                sub_user_id = data['subUserId']
                record_id = data['recordId']
                ref_id = data['refId']
                file_name = data['fileName']
                video_url = data['videoURL']
                audio_url = data['audioURL']
                midi_url = data['midiURL']
                sheet_url = data['sheetURL']
                waterfall_url = data['waterfallURL']
                report_url = data['reportURL']
                json_url = data['jsonURL']

                self.process_audio(is_ref, job_id, sub_user_id, record_id, ref_id, file_name, video_url, audio_url, midi_url,
                                   sheet_url, waterfall_url, report_url, json_url)
                ch.basic_ack(delivery_tag=method.delivery_tag)
                logging.info(f"Acknowledged job {job_id}")
            except Exception as e:
                logging.error(f"Error processing message: {e}")
                ch.basic_nack(delivery_tag=method.delivery_tag, requeue=True)

        def start_consuming(self):
            receiving_channel = self.connection.channel()
            receiving_channel.queue_declare(queue='audio_processing_queue')
            receiving_channel.basic_consume(queue='audio_processing_queue', on_message_callback=self.callback,
                                            auto_ack=False)
            logging.info('Waiting for messages.')
            receiving_channel.start_consuming()

        def close_connection(self):
            if self.connection and not self.connection.is_closed:
                self.connection.close()
                logging.info('Closed connection.')

        def delete_file(self, file_path):
            if os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except Exception as e:
                    print(f"Error deleting file {file_path}: {e}")
            else:
                print(f"The file {file_path} does not exist.")


    def main():
        logging.basicConfig(level=logging.INFO)
        processor = AudioProcessor()
        try:
            processor.start_consuming()
        except KeyboardInterrupt:
            processor.close_connection()


    if __name__ == "__main__":
        main()
  requirements.txt: |
    acme==1.21.0
    blinker==1.4
    certbot==1.21.0
    certbot-nginx==1.21.0
    certifi==2020.6.20
    chardet==4.0.0
    command-not-found==0.3
    ConfigArgParse==1.5.3
    configobj==5.0.6
    cryptography==3.4.8
    dbus-python==1.2.18
    distro==1.7.0
    distro-info==1.1+ubuntu0.2
    httplib2==0.20.2
    idna==3.3
    importlib-metadata==4.6.4
    jeepney==0.7.1
    josepy==1.10.0
    keyring==23.5.0
    launchpadlib==1.10.16
    lazr.restfulclient==0.14.4
    lazr.uri==1.0.6
    more-itertools==8.10.0
    netifaces==0.11.0
    networkx==3.3
    numpy==2.0.0
    oauthlib==3.2.0
    packaging==24.1
    parsedatetime==2.6
    pycairo==1.20.1
    pycryptodome==3.20.0
    Pygments==2.11.2
    PyGObject==3.42.1
    PyICU==2.8.1
    PyJWT==2.3.0
    pyOpenSSL==21.0.0
    pyparsing==2.4.7
    pyRFC3339==1.1
    python-apt==2.4.0+ubuntu3
    pytz==2022.1
    PyYAML==5.4.1
    requests==2.25.1
    requests-toolbelt==0.9.1
    SecretStorage==3.3.1
    six==1.16.0
    solc-select==1.0.4
    systemd-python==234
    ubuntu-advantage-tools==8001
    ufw==0.36.1
    unattended-upgrades==0.1
    urllib3==1.26.5
    wadllib==1.3.6
    zipp==1.0.0
    zope.component==4.3.0
    zope.event==4.4
    zope.hookable==5.1.0
    zope.interface==5.4.0
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: audioanalysis
  name: audioanalysis-cm0

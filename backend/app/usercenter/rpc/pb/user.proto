syntax = "proto3";

option go_package = "./pb";

package pb;

// Model definitions
message User {
  int64 id = 1;
  string email = 2;
  string nickname = 3;
  int64 sex = 4;
  string avatar = 5;
  string info = 6;
}

message UserAuth {
  int64 id = 1;
  int64 userId = 2;
  string authType = 3;
  string authKey = 4;
}

// Request and response messages
message RegisterReq {
  string email = 1;
  string nickname = 2;
  string password = 3;
  string authKey = 4;
  string authType = 5;
}

message RegisterResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message LoginReq {
  string authType = 1;
  string authKey = 2;
  string password = 3;
}

message LoginResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message GetUserInfoReq {
  int64 id = 1;
}

message GetUserInfoResp {
  User user = 1;
}

message GetUserAuthByAuthKeyReq {
  string authKey = 1;
  string authType = 2;
}

message GetUserAuthByAuthKeyResp {
  UserAuth userAuth = 1;
}

message GetUserAuthByUserIdReq {
  int64 userId = 1;
  string authType = 2;
}

message GetUserAuthByUserIdResp {
  UserAuth userAuth = 1;
}

message GenerateTokenReq {
  int64 userId = 1;
}

message GenerateTokenResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

// gRPC service definition
service UserCenter {
  rpc Login (LoginReq) returns (LoginResp);
  rpc Register (RegisterReq) returns (RegisterResp);
  rpc GetUserInfo (GetUserInfoReq) returns (GetUserInfoResp);
  rpc GetUserAuthByAuthKey (GetUserAuthByAuthKeyReq) returns (GetUserAuthByAuthKeyResp);
  rpc GetUserAuthByUserId (GetUserAuthByUserIdReq) returns (GetUserAuthByUserIdResp);
  rpc GenerateToken (GenerateTokenReq) returns (GenerateTokenResp);
}

// goctl rpc protoc *.proto --go_out=../ --go-grpc_out=../  --zrpc_out=../
// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	media "github.com/cedarHH/mygo/app/media/api/internal/handler/media"
	reference "github.com/cedarHH/mygo/app/media/api/internal/handler/reference"
	"github.com/cedarHH/mygo/app/media/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserAuthMiddleware},
			[]rest.Route{
				{
					// create new performance record
					Method:  http.MethodPost,
					Path:    "/createRecord",
					Handler: media.CreateRecordHandler(serverCtx),
				},
				{
					// delete performance record
					Method:  http.MethodPost,
					Path:    "/deleteRecord",
					Handler: media.DeleteRecordHandler(serverCtx),
				},
				{
					// get audio presigned url
					Method:  http.MethodPost,
					Path:    "/getAudioUrl",
					Handler: media.GetAudioUrlHandler(serverCtx),
				},
				{
					// get performance audio
					Method:  http.MethodPost,
					Path:    "/getPerformanceAudio",
					Handler: media.GetPerformanceAudioHandler(serverCtx),
				},
				{
					// get performance thumbnail
					Method:  http.MethodPost,
					Path:    "/getPerformanceImg",
					Handler: media.GetPerformanceImgHandler(serverCtx),
				},
				{
					// get performance midi
					Method:  http.MethodPost,
					Path:    "/getPerformanceMidi",
					Handler: media.GetPerformanceMidiHandler(serverCtx),
				},
				{
					// get performance report
					Method:  http.MethodPost,
					Path:    "/getPerformanceReport",
					Handler: media.GetPerformanceReportHandler(serverCtx),
				},
				{
					// get performance sheet
					Method:  http.MethodPost,
					Path:    "/getPerformanceSheet",
					Handler: media.GetPerformanceSheetHandler(serverCtx),
				},
				{
					// get performance video
					Method:  http.MethodPost,
					Path:    "/getPerformanceVideo",
					Handler: media.GetPerformanceVideoHandler(serverCtx),
				},
				{
					// get performance waterfall
					Method:  http.MethodPost,
					Path:    "/getPerformanceWaterfall",
					Handler: media.GetPerformanceWaterfallHandler(serverCtx),
				},
				{
					// get performance record
					Method:  http.MethodPost,
					Path:    "/getRecord",
					Handler: media.GetRecordHandler(serverCtx),
				},
				{
					// get video presigned url
					Method:  http.MethodPost,
					Path:    "/getVideoUrl",
					Handler: media.GetVideoUrlHandler(serverCtx),
				},
				{
					// set a performance record as reference
					Method:  http.MethodPost,
					Path:    "/setAsReference",
					Handler: media.SetAsReferenceHandler(serverCtx),
				},
				{
					// upload audio success
					Method:  http.MethodPost,
					Path:    "/uploadAudioSuccess",
					Handler: media.UploadAudioSuccessHandler(serverCtx),
				},
				{
					// upload video success
					Method:  http.MethodPost,
					Path:    "/uploadVideoSuccess",
					Handler: media.UploadVideoSuccessHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/media/record"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserAuthMiddleware},
			[]rest.Route{
				{
					// get the ranking of the tasks to be analysed, if it is 0, the analysis is finished
					Method:  http.MethodGet,
					Path:    "/getAnalysisResult",
					Handler: media.GetAnalysisResultHandler(serverCtx),
				},
				{
					// start analysing the performance
					Method:  http.MethodPost,
					Path:    "/performanceAnalysis",
					Handler: media.PerformanceAnalysisHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/media/analysis"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.UserAuthMiddleware},
			[]rest.Route{
				{
					// create a new reference
					Method:  http.MethodPost,
					Path:    "/createReference",
					Handler: reference.CreateReferenceHandler(serverCtx),
				},
				{
					// delete a reference
					Method:  http.MethodPost,
					Path:    "/deleteReference",
					Handler: reference.DeleteReferenceHandler(serverCtx),
				},
				{
					// get reference audio
					Method:  http.MethodPost,
					Path:    "/getRefAudio",
					Handler: reference.GetRefAudioHandler(serverCtx),
				},
				{
					// get reference audio
					Method:  http.MethodPost,
					Path:    "/getRefAudioUrl",
					Handler: reference.GetRefAudioUrlHandler(serverCtx),
				},
				{
					// get reference image
					Method:  http.MethodPost,
					Path:    "/getRefImg",
					Handler: reference.GetRefImgHandler(serverCtx),
				},
				{
					// get reference img
					Method:  http.MethodPost,
					Path:    "/getRefImgUrl",
					Handler: reference.GetRefImgUrlHandler(serverCtx),
				},
				{
					// get reference midi
					Method:  http.MethodPost,
					Path:    "/getRefMidi",
					Handler: reference.GetRefMidiHandler(serverCtx),
				},
				{
					// get reference sheet
					Method:  http.MethodPost,
					Path:    "/getRefSheet",
					Handler: reference.GetRefSheetHandler(serverCtx),
				},
				{
					// get reference video
					Method:  http.MethodPost,
					Path:    "/getRefVideo",
					Handler: reference.GetRefVideoHandler(serverCtx),
				},
				{
					// get reference video
					Method:  http.MethodPost,
					Path:    "/getRefVideoUrl",
					Handler: reference.GetRefVideoUrlHandler(serverCtx),
				},
				{
					// get reference waterfall image
					Method:  http.MethodPost,
					Path:    "/getRefWaterfall",
					Handler: reference.GetRefWaterfallHandler(serverCtx),
				},
				{
					// get reference list
					Method:  http.MethodPost,
					Path:    "/getReference",
					Handler: reference.GetReferenceHandler(serverCtx),
				},
				{
					// query reference
					Method:  http.MethodPost,
					Path:    "/queryReference",
					Handler: reference.QueryReferenceHandler(serverCtx),
				},
				{
					// upload audio success
					Method:  http.MethodPost,
					Path:    "/uploadRefAudioSuccess",
					Handler: reference.UploadRefAudioSuccessHandler(serverCtx),
				},
				{
					// upload image success
					Method:  http.MethodPost,
					Path:    "/uploadRefImgSuccess",
					Handler: reference.UploadRefImgSuccessHandler(serverCtx),
				},
				{
					// upload video success
					Method:  http.MethodPost,
					Path:    "/uploadRefVideoSuccess",
					Handler: reference.UploadRefVideoSuccessHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/media/reference"),
	)
}

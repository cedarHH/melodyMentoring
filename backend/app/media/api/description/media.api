syntax = "v1"

info (
	title:   "media"
	desc:    "media"
	author:  "xuesong huang"
	version: "v1"
)

import (
	"media/record.api"
	"media/analysis.api"
	"media/reference.api"
)

// goctl api go -api *.api -dir ../  -style=goZero
// goctl api plugin -plugin goctl-swagger="swagger -filename media.json -host localhost:8889 -basepath /" -api media.api -dir ./doc
//============================> usercenter v1 <============================
@server (
	prefix:     api/media/record
	group:      media
	middleware: UserAuthMiddleware
)
service media {
	@doc "create new performance record"
	@handler createRecord
	post /createRecord (CreateRecordReq) returns (CreateRecordResp)

	@doc "delete performance record"
	@handler deleteRecord
	post /deleteRecord (DeleteRecordReq) returns (DeleteRecordResp)

	@doc "get performance record"
	@handler getRecord
	post /getRecord (GetRecordReq) returns (GetRecordResp)

	@doc "set a performance record as reference"
	@handler setAsReference
	post /setAsReference (SetAsReferenceReq) returns (SetAsReferenceResp)

	@doc "get video presigned url"
	@handler getVideoUrl
	post /getVideoUrl (GetVideoUrlReq) returns (GetVideoUrlResp)

	@doc "upload video success"
	@handler uploadVideoSuccess
	post /uploadVideoSuccess (UploadVideoSuccessReq) returns (UploadVideoSuccessResp)

	@doc "get audio presigned url"
	@handler getAudioUrl
	post /getAudioUrl (GetAudioUrlReq) returns (GetAudioUrlResp)

	@doc "upload audio success"
	@handler uploadAudioSuccess
	post /uploadAudioSuccess (UploadAudioSuccessReq) returns (UploadAudioSuccessResp)

	@doc "get performance thumbnail"
	@handler getPerformanceImg
	post /getPerformanceImg (GetPerformanceImgReq) returns (GetPerformanceImgResp)

	@doc "get performance video"
	@handler getPerformanceVideo
	post /getPerformanceVideo (GetPerformanceVideoReq) returns (GetPerformanceVideoResp)

	@doc "get performance audio"
	@handler getPerformanceAudio
	post /getPerformanceAudio (GetPerformanceAudioReq) returns (GetPerformanceAudioResp)

	@doc "get performance midi"
	@handler getPerformanceMidi
	post /getPerformanceMidi (GetPerformanceMidiReq) returns (GetPerformanceMidiResp)

	@doc "get performance sheet"
	@handler getPerformanceSheet
	post /getPerformanceSheet (GetPerformanceSheetReq) returns (GetPerformanceSheetResp)

	@doc "get performance waterfall"
	@handler getPerformanceWaterfall
	post /getPerformanceWaterfall (GetPerformanceWaterfallReq) returns (GetPerformanceWaterfallResp)

	@doc "get performance report"
	@handler getPerformanceReport
	post /getPerformanceReport (GetPerformanceReportReq) returns (GetPerformanceReportResp)
}

@server (
	prefix:     api/media/analysis
	group:      media
	middleware: UserAuthMiddleware
)
service media {
	@doc "start analysing the performance"
	@handler performanceAnalysis
	post /performanceAnalysis (PerformanceAnalysisReq) returns (PerformanceAnalysisResp)

	@doc "get the ranking of the tasks to be analysed, if it is 0, the analysis is finished"
	@handler getAnalysisResult
	get /getAnalysisResult (GetAnalysisResultReq) returns (GetAnalysisResultResp)
}

@server (
	prefix:     api/media/reference
	group:      reference
	middleware: UserAuthMiddleware
)
service reference {
	@doc "create a new reference"
	@handler createReference
	post /createReference (CreateReferenceReq) returns (CreateReferenceResp)

	@doc "delete a reference"
	@handler deleteReference
	post /deleteReference (DeleteReferenceReq) returns (DeleteRecordResp)

	@doc "query reference"
	@handler queryReference
	post /queryReference (QueryReferenceReq) returns (QueryReferenceResp)

	@doc "get reference list"
	@handler getReferences
	post /getReferences (GetReferencesReq) returns (GetReferencesResp)

	@doc "get a reference"
	@handler getReferenceDetail
	post /getReferenceDetail (GetReferenceDetailReq) returns (GetReferenceDetailResp)

	@doc "upload audio success"
	@handler uploadRefAudioSuccess
	post /uploadRefAudioSuccess (UploadRefAudioSuccessReq) returns (UploadRefAudioSuccessResp)

	@doc "upload video success"
	@handler uploadRefVideoSuccess
	post /uploadRefVideoSuccess (UploadRefVideoSuccessReq) returns (UploadRefVideoSuccessResp)
}
